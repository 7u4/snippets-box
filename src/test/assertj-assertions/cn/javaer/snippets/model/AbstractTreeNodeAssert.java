package cn.javaer.snippets.model;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link TreeNode} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractTreeNodeAssert<S extends AbstractTreeNodeAssert<S, A>, A extends TreeNode> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractTreeNodeAssert}</code> to make assertions on actual TreeNode.
   * @param actual the TreeNode we want to make assertions on.
   */
  protected AbstractTreeNodeAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual TreeNode's children contains the given TreeNode elements.
   * @param children the given elements that should be contained in actual TreeNode's children.
   * @return this assertion object.
   * @throws AssertionError if the actual TreeNode's children does not contain all given TreeNode elements.
   */
  public S hasChildren(TreeNode... children) {
    // check that actual TreeNode we want to make assertions on is not null.
    isNotNull();

    // check that given TreeNode varargs is not null.
    if (children == null) failWithMessage("Expecting children parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getChildren(), children);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual TreeNode's children contains the given TreeNode elements in Collection.
   * @param children the given elements that should be contained in actual TreeNode's children.
   * @return this assertion object.
   * @throws AssertionError if the actual TreeNode's children does not contain all given TreeNode elements.
   */
  public S hasChildren(java.util.Collection<? extends TreeNode> children) {
    // check that actual TreeNode we want to make assertions on is not null.
    isNotNull();

    // check that given TreeNode collection is not null.
    if (children == null) {
      failWithMessage("Expecting children parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getChildren(), children.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual TreeNode's children contains <b>only</b> the given TreeNode elements and nothing else in whatever order.
   * @param children the given elements that should be contained in actual TreeNode's children.
   * @return this assertion object.
   * @throws AssertionError if the actual TreeNode's children does not contain all given TreeNode elements.
   */
  public S hasOnlyChildren(TreeNode... children) {
    // check that actual TreeNode we want to make assertions on is not null.
    isNotNull();

    // check that given TreeNode varargs is not null.
    if (children == null) failWithMessage("Expecting children parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getChildren(), children);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual TreeNode's children contains <b>only</b> the given TreeNode elements in Collection and nothing else in whatever order.
   * @param children the given elements that should be contained in actual TreeNode's children.
   * @return this assertion object.
   * @throws AssertionError if the actual TreeNode's children does not contain all given TreeNode elements.
   */
  public S hasOnlyChildren(java.util.Collection<? extends TreeNode> children) {
    // check that actual TreeNode we want to make assertions on is not null.
    isNotNull();

    // check that given TreeNode collection is not null.
    if (children == null) {
      failWithMessage("Expecting children parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getChildren(), children.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual TreeNode's children does not contain the given TreeNode elements.
   *
   * @param children the given elements that should not be in actual TreeNode's children.
   * @return this assertion object.
   * @throws AssertionError if the actual TreeNode's children contains any given TreeNode elements.
   */
  public S doesNotHaveChildren(TreeNode... children) {
    // check that actual TreeNode we want to make assertions on is not null.
    isNotNull();

    // check that given TreeNode varargs is not null.
    if (children == null) failWithMessage("Expecting children parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getChildren(), children);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual TreeNode's children does not contain the given TreeNode elements in Collection.
   *
   * @param children the given elements that should not be in actual TreeNode's children.
   * @return this assertion object.
   * @throws AssertionError if the actual TreeNode's children contains any given TreeNode elements.
   */
  public S doesNotHaveChildren(java.util.Collection<? extends TreeNode> children) {
    // check that actual TreeNode we want to make assertions on is not null.
    isNotNull();

    // check that given TreeNode collection is not null.
    if (children == null) {
      failWithMessage("Expecting children parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getChildren(), children.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual TreeNode has no children.
   * @return this assertion object.
   * @throws AssertionError if the actual TreeNode's children is not empty.
   */
  public S hasNoChildren() {
    // check that actual TreeNode we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have children but had :\n  <%s>";

    // check
    if (actual.getChildren().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getChildren());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual TreeNode's title is equal to the given one.
   * @param title the given title to compare the actual TreeNode's title to.
   * @return this assertion object.
   * @throws AssertionError - if the actual TreeNode's title is not equal to the given one.
   */
  public S hasTitle(T title) {
    // check that actual TreeNode we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting title of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    T actualTitle = actual.getTitle();
    if (!Objects.areEqual(actualTitle, title)) {
      failWithMessage(assertjErrorMessage, actual, title, actualTitle);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
