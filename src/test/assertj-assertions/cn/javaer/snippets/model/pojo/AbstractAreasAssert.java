package cn.javaer.snippets.model.pojo;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link Areas} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractAreasAssert<S extends AbstractAreasAssert<S, A>, A extends Areas> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractAreasAssert}</code> to make assertions on actual Areas.
   * @param actual the Areas we want to make assertions on.
   */
  protected AbstractAreasAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Areas's area1 is equal to the given one.
   * @param area1 the given area1 to compare the actual Areas's area1 to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Areas's area1 is not equal to the given one.
   */
  public S hasArea1(String area1) {
    // check that actual Areas we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting area1 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualArea1 = actual.getArea1();
    if (!Objects.areEqual(actualArea1, area1)) {
      failWithMessage(assertjErrorMessage, actual, area1, actualArea1);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Areas's area2 is equal to the given one.
   * @param area2 the given area2 to compare the actual Areas's area2 to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Areas's area2 is not equal to the given one.
   */
  public S hasArea2(String area2) {
    // check that actual Areas we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting area2 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualArea2 = actual.getArea2();
    if (!Objects.areEqual(actualArea2, area2)) {
      failWithMessage(assertjErrorMessage, actual, area2, actualArea2);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Areas's area3 is equal to the given one.
   * @param area3 the given area3 to compare the actual Areas's area3 to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Areas's area3 is not equal to the given one.
   */
  public S hasArea3(String area3) {
    // check that actual Areas we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting area3 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualArea3 = actual.getArea3();
    if (!Objects.areEqual(actualArea3, area3)) {
      failWithMessage(assertjErrorMessage, actual, area3, actualArea3);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
