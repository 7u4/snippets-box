package cn.javaer.snippets.model.pojo;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link Product} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractProductAssert<S extends AbstractProductAssert<S, A>, A extends Product> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractProductAssert}</code> to make assertions on actual Product.
   * @param actual the Product we want to make assertions on.
   */
  protected AbstractProductAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Product's category1 is equal to the given one.
   * @param category1 the given category1 to compare the actual Product's category1 to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Product's category1 is not equal to the given one.
   */
  public S hasCategory1(String category1) {
    // check that actual Product we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting category1 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCategory1 = actual.getCategory1();
    if (!Objects.areEqual(actualCategory1, category1)) {
      failWithMessage(assertjErrorMessage, actual, category1, actualCategory1);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Product's category2 is equal to the given one.
   * @param category2 the given category2 to compare the actual Product's category2 to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Product's category2 is not equal to the given one.
   */
  public S hasCategory2(String category2) {
    // check that actual Product we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting category2 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCategory2 = actual.getCategory2();
    if (!Objects.areEqual(actualCategory2, category2)) {
      failWithMessage(assertjErrorMessage, actual, category2, actualCategory2);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Product's count is equal to the given one.
   * @param count the given count to compare the actual Product's count to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Product's count is not equal to the given one.
   */
  public S hasCount(Long count) {
    // check that actual Product we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting count of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Long actualCount = actual.getCount();
    if (!Objects.areEqual(actualCount, count)) {
      failWithMessage(assertjErrorMessage, actual, count, actualCount);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Product's dynamicData is equal to the given one.
   * @param dynamicData the given dynamicData to compare the actual Product's dynamicData to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Product's dynamicData is not equal to the given one.
   */
  public S hasDynamicData(java.util.Map dynamicData) {
    // check that actual Product we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting dynamicData of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Map actualDynamicData = actual.getDynamicData();
    if (!Objects.areEqual(actualDynamicData, dynamicData)) {
      failWithMessage(assertjErrorMessage, actual, dynamicData, actualDynamicData);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Product's id is equal to the given one.
   * @param id the given id to compare the actual Product's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Product's id is not equal to the given one.
   */
  public S hasId(Long id) {
    // check that actual Product we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Long actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Product's name is equal to the given one.
   * @param name the given name to compare the actual Product's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Product's name is not equal to the given one.
   */
  public S hasName(String name) {
    // check that actual Product we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
